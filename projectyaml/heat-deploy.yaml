heat_template_version: 2014-10-16

description: Heat template for Jenkins and deployment

parameters:
    
  image_name:
    type: string
    description: Image Name
    default: "Ubuntu 18.04"

  ssh_key_name:
    type: string
    description: OpenStack key name

  deploy_private_key:
    type: string
    description: Private Key for Deploy keypair

  public_keys_url:
    type: string
    description: url of public keys to add to authorized_keys file (refreshes every 15 minutes)

  deploy_repository:
    type: string
    description: git repository of app to be deployed
    default: "git@cisgitlab.ufv.ca:201901COMP351AB1g05/driver_app.git"


  deploy_executable:
    type: string
    description: command to run in cloned repository directory (starts the application)
    default: ./run.sh

  public_net:
    type: string
    description: public network 
    default: "ssh-proxy"    
   
  private_net:
    type: string
    description: private network
    default: "default"

  setup_runcmd_url:
    type: string
    description: url of runcmd script to set proxy, install docker, etc.
    default: "https://cisgitlab.ufv.ca/201701COMP351AB1/heat-templates/raw/master/heat-onehost-proxied-runcmd.sh"


resources:

  deploy_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }

  deploy_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: deploy_port}

  jenkins_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }

  jenkins_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: jenkins_port}

  
  deploy:
    type: OS::Nova::Server
    properties:
      name: brandon-deploy-server
      key_name: { get_param: ssh_key_name }
      config_drive: true
      image: { get_param: image_name }
      flavor: m1.small
      networks:
        - port: { get_resource: deploy_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config

            hostname: $STACK_NAME
            manage_etc_hosts: true

            groups:
            - docker: [ubuntu]

            users:
            - default

            write_files:
            - owner: root:root
              path: /etc/cron.d/refresh_keys
              permissions: '0644'
              content: |
                # refresh authorized keys every 15 minutes
                '*/15 * * * * root /usr/local/bin/refresh_keys.sh >/dev/null 2>&1'
                # this file requires a newline on the last line

            - owner: root:root
              path: /usr/local/bin/refresh_keys.sh
              permissions: '0755'
              content: |
                #!/usr/bin/env bash
                # exit if KEYS_URL is blank
                [ -z "$KEYS_URL" ] && exit 0

                # fetch new copy of public keys
                rm -f /tmp/fetched_keys || exit 1
                touch /tmp/fetched_keys || exit 1
                chmod 0600 /tmp/fetched_keys || exit 1
                curl $KEYS_URL > /tmp/fetched_keys

                # update every authorized_keys file
                cd /home
                for fn in * ; do
                [ -e "${fn}/.ssh/authorized_keys" ] && {
                    rm -f /tmp/$$authorized_keys
                    touch /tmp/$$authorized_keys
                    chmod 0600 /tmp/$$authorized_keys
                    cat "${fn}/.ssh/authorized_keys" > /tmp/$$authorized_keys
                    cat /tmp/fetched_keys >> /tmp/$$authorized_keys
                    sort -u /tmp/$$authorized_keys > "${fn}/.ssh/authorized_keys"
                    rm -f /tmp/$$authorized_keys
                }
                rm -f /tmp/fetched_keys
                done
            - owner: root:root
              path: /root/.ssh/id_ecdsa
              permissions: '0600'
              content: $DEPLOY_PRIVATE_KEY

            apt:
              # prevent the sources section from disabling the default repos
              # preserve_sources_list: true

              sources:

                docker.list:
                  source: "deb http://apt.dockerproject.org/repo ubuntu-$RELEASE main"
                  keyid: 58118E89F3A912897C070ADBF76221572C52609D
                  keyserver: ha.pool.sks-keyservers.net

            runcmd:
            # set permissions in case write_files above created .ssh
            - chmod 0600 /root/.ssh
            # replace % with newlines to put private key in correct format 
            - sed -i 's/%/\n/g' /root/.ssh/id_ecdsa
            # update system
            - sudo apt-get update -y
            - sudo apt-get upgrade -y
            - sudo apt-get dist-upgrade
            # install python, pip and django
            - sudo apt-get install python3 -y
            - sudo apt install python3-pip -y
            - pip3 install Django
            # install and configure ngrok
            - sudo apt install npm -y
            - sudo chmod -R a+rwx /usr/local/lib
            - sudo chmod -R a+rwx /usr/local/bin
            - npm i -g ngrok
            # clone application and go to directory
            - mkdir -p /code
            - cd /
            # add citgitlab.ufv.ca to known hosts
            - sudo ssh-keyscan cisgitlab.ufv.ca >> /root/.ssh/known_hosts
            - sudo git clone $DEPLOY_REPOSITORY /code
            - sudo chmod -R a+rwx /code
            - cd /code/driver_app
            # get any needed packages, make migrations, and run the server on localhost
            - pip3 install -r requirements.txt
            - python3 manage.py makemigrations map
            - python3 manage.py migrate
            # add validation service to yubikey plugin
            - python3 manage.py shell
            - from otp_yubikey.models import ValidationService
            - ValidationService.objects.create(name='default', use_ssl=True, param_sl='', param_timeout='')
            - exit()
            # runserver in background and start ngrok in new shell for port 8000
            - python3 manage.py runserver &
            - echo -ne '\n'
            - ngrok http 8000
          

          params:
            $SETUP_RUNCMD_URL: {get_param: setup_runcmd_url }
            $DEPLOY_REPOSITORY: {get_param: deploy_repository }
            $DEPLOY_EXECUTABLE: {get_param: deploy_executable }
            $STACK_NAME: brandon-deploy-server
            $KEYS_URL : {get_param: public_keys_url }
            $DEPLOY_PRIVATE_KEY: {get_param: deploy_private_key}

  jenkins:
      type: OS::Nova::Server
      properties:
        name: brandon-jenkins-server
        key_name: { get_param: ssh_key_name }
        config_drive: true
        image: { get_param: image_name }
        flavor: m1.small
        networks:
          - port: { get_resource: jenkins_port }
        user_data_format: RAW
        user_data:
          str_replace:
            template: |
              #cloud-config

              hostname: jenkins
              manage_etc_hosts: true

              groups:
              - docker: [ubuntu]

              users:
              - default

              write_files:
              - owner: root:root
                path: /etc/cron.d/refresh_keys
                permissions: '0644'
                content: |
                  # refresh authorized keys every 15 minutes
                  '*/15 * * * * root /usr/local/bin/refresh_keys.sh >/dev/null 2>&1'
                  # this file requires a newline on the last line

              - owner: root:root
                path: /usr/local/bin/refresh_keys.sh
                permissions: '0755'
                content: |
                  #!/usr/bin/env bash
                  # exit if KEYS_URL is blank
                  [ -z "$KEYS_URL" ] && exit 0

                  # fetch new copy of public keys
                  rm -f /tmp/fetched_keys || exit 1
                  touch /tmp/fetched_keys || exit 1
                  chmod 0600 /tmp/fetched_keys || exit 1
                  curl $KEYS_URL > /tmp/fetched_keys

                  # update every authorized_keys file
                  cd /home
                  for fn in * ; do
                  [ -e "${fn}/.ssh/authorized_keys" ] && {
                      rm -f /tmp/$$authorized_keys
                      touch /tmp/$$authorized_keys
                      chmod 0600 /tmp/$$authorized_keys
                      cat "${fn}/.ssh/authorized_keys" > /tmp/$$authorized_keys
                      cat /tmp/fetched_keys >> /tmp/$$authorized_keys
                      sort -u /tmp/$$authorized_keys > "${fn}/.ssh/authorized_keys"
                      rm -f /tmp/$$authorized_keys
                  }
                  rm -f /tmp/fetched_keys
                  done
              - owner: root:root
                path: /root/.ssh/id_ecdsa
                permissions: '0600'
                content: $DEPLOY_PRIVATE_KEY

              apt:
                # prevent the sources section from disabling the default repos
                # preserve_sources_list: true

                sources:

                  docker.list:
                    source: "deb http://apt.dockerproject.org/repo ubuntu-$RELEASE main"
                    keyid: 58118E89F3A912897C070ADBF76221572C52609D
                    keyserver: ha.pool.sks-keyservers.net

              runcmd:
              # set permissions in case write_files above created .ssh
              - chmod 0600 /root/.ssh
              # replace % with newlines to put private key in correct format 
              - sed -i 's/%/\n/g' /root/.ssh/id_ecdsa
              # update system
              - sudo apt-get update -y
              - sudo apt-get upgrade -y
              - sudo apt-get dist-upgrade
              # install python, pip and django
              - sudo apt-get install python3 -y
              - sudo apt install python3-pip -y
              - pip3 install Django
              # install docker and docker-compose
              - sudo apt-get install docker -y
              - sudo apt-get install docker-compose -y
              # add citgitlab.ufv.ca to known hosts
              - sudo ssh-keyscan cisgitlab.ufv.ca >> /root/.ssh/known_hosts
              # start up jenkins in docker container from image
              - docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

            params:
              $SETUP_RUNCMD_URL: {get_param: setup_runcmd_url }
              $DEPLOY_REPOSITORY: {get_param: deploy_repository }
              $DEPLOY_EXECUTABLE: {get_param: deploy_executable }
              $STACK_NAME: brandon-jenkins-server
              $KEYS_URL : {get_param: public_keys_url }
              $DEPLOY_PRIVATE_KEY: {get_param: deploy_private_key}
